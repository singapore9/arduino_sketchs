#include <AccelStepper.h>
#include <Servo.h>
#include <LiquidCrystal_I2C.h>
// добавить схему работы "нажимаешь на кнопку - перемещается к следующей координате"

#define BUTTON_IN 2
#define SERVO_IN 3

#define SERVO_ANGLE 50

#define STEPPER_DIRECTION_PIN 12
#define STEPPER_STEP_PIN 13

#define STEPPER_MS1 4
#define STEPPER_MS2 7
#define STEPPER_MS3 8


Servo servo;
LiquidCrystal_I2C lcd(0x27, 16, 2);


void setup() {
    // передвинуть стрелу шагового двигателя на 0
    pinMode(STEPPER_STEP_PIN, OUTPUT);
    pinMode(STEPPER_DIRECTION_PIN, OUTPUT);
    digitalWrite(STEPPER_DIRECTION_PIN, LOW);
    digitalWrite(STEPPER_MS1, HIGH);
    digitalWrite(STEPPER_MS2, HIGH);
    digitalWrite(STEPPER_MS3, HIGH);

    servo.attach(SERVO_IN);
    servo.write(0);

    pinMode(BUTTON_IN, INPUT);
    lcd.init();                     
    lcd.backlight();
    lcd.setCursor(0, 0); lcd.print("  Press button     ");
    lcd.setCursor(0, 1); lcd.print("   for start       ");

    Serial.begin(9600);
}

bool buttonHasAlreadyBeenPressed = false;

int pinsForVisiting[] = {1, 10, 30, 20};
int STEPS_COUNT_FOR_PIN[] = {
    0*16,
    1*16,
    2*16,
    3*16,
    4*16,
    5*16,
    6*16,
    7*16,
    8*16,
    9*16,
    10*16,
    11*16,
    12*16,
    13*16,
    14*16,
    15*16,
    16*16,
    17*16,
    18*16,
    19*16,
    20*16,
    21*16,
    22*16,
    23*16,
    24*16,
    25*16,
    26*16,
    27*16,
    28*16,
    29*16,
    30*16,
    31*16,
    32*16,
    33*16,
    34*16,
    35*16,
    36*16,
    37*16,
    38*16,
    39*16,
    40*16,
    41*16,
    42*16,
    43*16,
    44*16,
    45*16,
    46*16,
    47*16,
    48*16,
    49*16,
    50*16,
    51*16,
    52*16,
    53*16,
    54*16,
    55*16,
    56*16,
    57*16,
    58*16,
    59*16,
    60*16,
    61*16,
    62*16,
    63*16,
    64*16,
    65*16,
    66*16,
    67*16,
    68*16,
    69*16,
    70*16,
    71*16,
    72*16,
    73*16,
    74*16,
    75*16,
    76*16,
    77*16,
    78*16,
    79*16,
    80*16,
    81*16,
    82*16,
    83*16,
    84*16,
    85*16,
    86*16,
    87*16,
    88*16,
    89*16,
    90*16,
    91*16,
    92*16,
    93*16,
    94*16,
    95*16,
    96*16,
    97*16,
    98*16,
    99*16,
    100*16,
    101*16,
    102*16,
    103*16,
    104*16,
    105*16,
    106*16,
    107*16,
    108*16,
    109*16,
    110*16,
    111*16,
    112*16,
    113*16,
    114*16,
    115*16,
    116*16,
    117*16,
    118*16,
    119*16,
    120*16,
    121*16,
    122*16,
    123*16,
    124*16,
    125*16,
    126*16,
    127*16,
    128*16,
    129*16,
    130*16,
    131*16,
    132*16,
    133*16,
    134*16,
    135*16,
    136*16,
    137*16,
    138*16,
    139*16,
    140*16,
    141*16,
    142*16,
    143*16,
    144*16,
    145*16,
    146*16,
    147*16,
    148*16,
    149*16,
    150*16,
    151*16,
    152*16,
    153*16,
    154*16,
    155*16,
    156*16,
    157*16,
    158*16,
    159*16,
    160*16,
    161*16,
    162*16,
    163*16,
    164*16,
    165*16,
    166*16,
    167*16,
    168*16,
    169*16,
    170*16,
    171*16,
    172*16,
    173*16,
    174*16,
    175*16,
    176*16,
    177*16,
    178*16,
    179*16,
    180*16,
    181*16,
    182*16,
    183*16,
    184*16,
    185*16,
    186*16,
    187*16,
    188*16,
    189*16,
    190*16,
    191*16,
    192*16,
    193*16,
    194*16,
    195*16,
    196*16,
    197*16,
    198*16,
    199*16
};

const int DELTA_STEPS = 8;

void makeSteps(int stepsCount, bool direction) {
    int currentStep = 0;
    if (stepsCount < 0) {
        stepsCount = -stepsCount;
    }
    digitalWrite(STEPPER_DIRECTION_PIN, direction);
    while (currentStep != stepsCount) {
        // Serial.print("\t\t\t"); Serial.print(currentStep); Serial.print(" != "); Serial.println(stepsCount);  
        currentStep++;
        digitalWrite(STEPPER_STEP_PIN, HIGH);
        delay(5);
        digitalWrite(STEPPER_STEP_PIN, LOW);
        delay(5);
    }
}


void makeActionForPin(int pinIndex) {
    int middleStepsCount = STEPS_COUNT_FOR_PIN[pinIndex];
    int leftBorder = middleStepsCount - DELTA_STEPS;
    int rightBorder = middleStepsCount + DELTA_STEPS;

    Serial.print("\tclockwise steps: ");
    Serial.println(leftBorder);
    makeSteps(leftBorder, LOW); // clockwise

    Serial.println("\t\tpush cursor");
    servo.write(SERVO_ANGLE);
    delay(1000);

    Serial.print("\tclockwise steps: ");
    Serial.println(2 * DELTA_STEPS);
    makeSteps(2 * DELTA_STEPS, LOW); // clockwise

    Serial.println("\t\tpull cursor");
    servo.write(0);
    delay(1000);

    Serial.print("\tcounterclockwise steps: ");
    Serial.println(rightBorder);
    makeSteps(rightBorder, HIGH);  //counter-clockwise
}

void visitAllPins() {
    float degrees;
    int stepsCount;
    int currentPin;

    int pinsForVisitingCount = sizeof(pinsForVisiting) / sizeof(int);

    for (int i=0; i < pinsForVisitingCount; i++) {
        currentPin = pinsForVisiting[i];
        Serial.print("N "); Serial.print(i+1); Serial.print(": "); Serial.print(currentPin); Serial.println(" pin");

        lcd.setCursor(0, 0); lcd.print(" "); lcd.print(i+1); lcd.print(". Pin: "); lcd.print(currentPin); lcd.print("         ");
        lcd.setCursor(0, 1); lcd.print("                   ");

        makeActionForPin(currentPin);
        Serial.println("");
        delay(1000);
    }
    lcd.setCursor(0, 0); lcd.print("                 ");
    lcd.setCursor(0, 1); lcd.print("     FINISH      ");
}

bool isButtonPressed() {
    bool buttonPressStart = digitalRead(BUTTON_IN);
    delay(300);
    bool buttonPressFinish = digitalRead(BUTTON_IN);
    if ((buttonPressStart == buttonPressFinish) && (buttonPressStart == 1)) {
       return true;
    }
    return false;
}

void loop(){
    if (buttonHasAlreadyBeenPressed) {
      delay(10000);
//        Serial.println("Skip. Already pressed");
        return;
    }
    bool isButtonPressedNow = isButtonPressed();
    if (isButtonPressedNow) {
        Serial.println("Work. First button press");
        Serial.println("5 sec");
        buttonHasAlreadyBeenPressed = true;
        delay(5000);
        visitAllPins();
    }
}